# Docker Compose (v2) 設定ファイル
# - version: は不要なので削除
# - 環境変数はルートの .env を env_file で一括読み込み
# - 単一のデフォルトネットワークを使用

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: myapp_backend
    # FastAPI は 0.0.0.0:8000 でリッスン
    ports:
      - "${BACKEND_PORT}:8000"         # ホスト:コンテナ
    env_file:
      - .env                           # ルートの .env を読み込む
    environment:
      - TZ=${TZ}
      - PYTHONPYCACHEPREFIX=/dev/null  # __pycache__ 無効化
    volumes:
      - ./backend/src:/app             # ソースマウント (開発用)
      - ./logs/backend:/var/log/backend
    depends_on:
      db:
        condition: service_healthy     # DB がヘルシーになるまで待機
    networks:
      - default
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/latest/healthcheck"]
      interval: 30s
      timeout: 5s
      retries: 3

  db:
    image: postgres:16
    container_name: myapp_postgres
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - TZ=${TZ}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./logs/postgresql:/var/log/postgresql
    networks:
      - default
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 5s
      retries: 5

  nginx:
    image: nginx:latest
    container_name: myapp_nginx
    env_file:
      - .env                           # ルートの .env を読み込む
    environment:
      - TZ=${TZ}
    ports:
      - "${NGINX_PORT}:80"            # ホスト:コンテナ
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/proxy_params:/etc/nginx/proxy_params:ro
      - ./nginx/backend.conf:/etc/nginx/conf.d/default.conf:ro
      - ./logs/nginx:/var/log/nginx  # ログ出力先

    depends_on:
      backend:
        condition: service_healthy     # Backend がヘルシーになるまで待機
    networks:
      - default
    restart: always

# データ永続化用ボリューム
volumes:
  pgdata:
    driver: local

# 単一ネットワーク定義 (.env の NETWORK_NAME を使用)
networks:
  default:
    name: ${NETWORK_NAME}
    driver: bridge
